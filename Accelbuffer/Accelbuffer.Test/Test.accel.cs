//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     编译器版本:v0.1.0.5
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Accelbuffer.Injection;
using Accelbuffer.Memory;
using ProtoBuf;
using System.Collections.Generic;

namespace Accelbuffer.Test
{
    [ProtoContract]
	[MemorySize(256)]
    [SerializeBy(typeof(TestSerializer))]
	public struct Test
	{
        [ProtoMember(1)]
		[FieldIndex(1)]
		public string StringValue;
        [ProtoMember(2)]
        [FieldIndex(2)]
		public int Int32Value;
        [ProtoMember(3)]
        [FieldIndex(3)]
        public List<Test1> ListValue;
	}

    [ProtoContract]
    [MemorySize(256)]
    [SerializeBy(typeof(Test1Serializer))]
    public struct Test1
	{
        [ProtoMember(1)]
        [FieldIndex(1)]
		public float FloatValue;
        [ProtoMember(2)]
        [FieldIndex(2)]
        public Dictionary<string, int> DictValue;
	}

    public class TestSerializer : ITypeSerializer<Test>
    {
        Test ITypeSerializer<Test>.Deserialize(ref AccelReader reader)
        {
            Test result = new Test();

            while (reader.HasNext(out int index))
            {
                switch (index)
                {
                    case 1:
                        result.StringValue = reader.ReadString();
                        break;
                    case 2:
                        result.Int32Value = reader.ReadInt32();
                        break;
                    case 3:
                        result.ListValue = reader.ReadGeneric<List<Test1>>();
                        break;
                    default:
                        reader.SkipNext();
                        break;
                }
            }

            return result;
        }

        void ITypeSerializer<Test>.Serialize(Test obj, ref AccelWriter writer)
        {
            writer.WriteValue(1, obj.StringValue);
            writer.WriteValue(2, obj.Int32Value);
            writer.WriteValue(3, obj.ListValue);
        }
    }

    public class Test1Serializer : ITypeSerializer<Test1>
    {
        Test1 ITypeSerializer<Test1>.Deserialize(ref AccelReader reader)
        {
            Test1 result = new Test1();

            while (reader.HasNext(out int index))
            {
                switch (index)
                {
                    case 1:
                        result.FloatValue = reader.ReadFloat32();
                        break;
                    case 2:
                        result.DictValue = reader.ReadGeneric<Dictionary<string, int>>();
                        break;
                    default:
                        reader.SkipNext();
                        break;
                }
            }

            return result;
        }

        void ITypeSerializer<Test1>.Serialize(Test1 obj, ref AccelWriter writer)
        {
            writer.WriteValue(1, obj.FloatValue);
            writer.WriteValue(2, obj.DictValue);
        }
    }
}
