<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accelbuffer</name>
    </assembly>
    <members>
        <member name="T:Accelbuffer.InvalidFieldIndexException">
            <summary>
            无效的字段索引错误
            </summary>
        </member>
        <member name="M:Accelbuffer.InvalidFieldIndexException.#ctor">
            <summary>
            初始化 InvalidFieldIndexException
            </summary>
        </member>
        <member name="M:Accelbuffer.InvalidFieldIndexException.#ctor(System.String)">
            <summary>
            初始化 InvalidFieldIndexException
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.InvalidFieldIndexException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 InvalidFieldIndexException
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.InvalidUTF8CharException">
            <summary>
            无效的UTF8字符错误
            </summary>
        </member>
        <member name="M:Accelbuffer.InvalidUTF8CharException.#ctor">
            <summary>
            初始化 InvalidUTF8CharException
            </summary>
        </member>
        <member name="M:Accelbuffer.InvalidUTF8CharException.#ctor(System.String)">
            <summary>
            初始化 InvalidUTF8CharException
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.InvalidUTF8CharException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 InvalidUTF8CharException
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.SerializerTypeException">
            <summary>
            序列化代理类型错误
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializerTypeException.#ctor">
            <summary>
            初始化 SerializerTypeException
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializerTypeException.#ctor(System.String)">
            <summary>
            初始化 SerializerTypeException
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.SerializerTypeException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 SerializerTypeException
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.Injection.NeverNullAttribute">
            <summary>
            指示在序列化时这个字段的值永远不会是null。
            标记了这个特性的字段在写入时不会进行null检查
            </summary>
        </member>
        <member name="T:Accelbuffer.Injection.OnAfterDeserializationAttribute">
            <summary>
            指定一个方法为反序列化后的回调方法
            </summary>
        </member>
        <member name="T:Accelbuffer.Injection.OnBeforeSerializationAttribute">
            <summary>
            指定一个方法为序列化前的回调方法
            </summary>
        </member>
        <member name="T:Accelbuffer.Injection.FieldIndexAttribute">
            <summary>
            指示字段的序列化索引，只有标记了这个特性的字段才会参与序列化
            </summary>
        </member>
        <member name="P:Accelbuffer.Injection.FieldIndexAttribute.Index">
            <summary>
            获取字段的序列化索引
            </summary>
        </member>
        <member name="M:Accelbuffer.Injection.FieldIndexAttribute.#ctor(System.Int32)">
            <summary>
            初始化 FieldIndexAttribute 实例
            </summary>
            <param name="index">
            字段的序列化索引，必须是 (0, 268435456] 范围内的整数；
            如果可能，索引应该尽可能全部连续（以1递增或递减）
            </param>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_SerializeArguments">
            <summary>
            T, AccelWriter&amp;
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_DeserializeMethodArguments">
            <summary>
            AccelReader&amp;
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_WriteValueMethodArguments">
            <summary>
            int, T
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_WriteValueGenericMethod">
            <summary>
            <see cref="M:Accelbuffer.AccelWriter.WriteValue``1(System.Int32,``0)"/>
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_RequireFieldExceptionCtorArgument">
            <summary>
            string
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_HasNextMethod">
            <summary>
            <see cref="M:Accelbuffer.AccelReader.HasNext(System.Int32@)"/>
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_SkipNextMethod">
            <summary>
            <see cref="M:Accelbuffer.AccelReader.SkipNext"/>
            </summary>
        </member>
        <member name="F:Accelbuffer.Injection.SerializerGenerationProgress.s_ReadGenericMethod">
            <summary>
            <see cref="M:Accelbuffer.AccelReader.ReadGeneric``1"/>
            </summary>
        </member>
        <member name="T:Accelbuffer.Injection.SerializerInjector">
            <summary>
            公开对序列化代理绑定的接口
            </summary>
        </member>
        <member name="M:Accelbuffer.Injection.SerializerInjector.AddBinding``2">
            <summary>
            添加一个序列化代理的绑定，如果已经存在，则覆盖
            </summary>
            <typeparam name="TObject">序列化对象类型</typeparam>
            <typeparam name="TSerializer">被绑定的代理类型</typeparam>
        </member>
        <member name="M:Accelbuffer.Injection.SerializerInjector.AddBinding(System.Type,System.Type)">
            <summary>
            添加一个序列化代理的绑定，如果已经存在，则覆盖
            </summary>
            <param name="objectType">序列化对象类型</param>
            <param name="serializerType">被绑定的代理类型</param>
            <exception cref="T:Accelbuffer.SerializerTypeException"><paramref name="serializerType"/>类型错误</exception>
        </member>
        <member name="M:Accelbuffer.Injection.SerializerInjector.HasBinding``1(System.Boolean)">
            <summary>
            获取是否已经存在绑定
            </summary>
            <typeparam name="TObject">序列化对象类型</typeparam>
            <param name="checkAttribute">指示是否检查类型的<see cref="T:Accelbuffer.SerializeByAttribute"/></param>
            <returns>如果已经存在，返回true，否则，false</returns>
        </member>
        <member name="M:Accelbuffer.Injection.SerializerInjector.HasBinding(System.Type,System.Boolean)">
            <summary>
            获取是否已经存在绑定
            </summary>
            <param name="objectType">序列化对象类型</param>
            <param name="checkAttribute">指示是否检查类型的<see cref="T:Accelbuffer.SerializeByAttribute"/></param>
            <returns>如果已经存在，返回true，否则，false</returns>
        </member>
        <member name="T:Accelbuffer.Memory.NativeBuffer">
            <summary>
            表示一个非托管缓冲区
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.NativeBuffer.Length">
            <summary>
            获取缓冲区的长度
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.NativeBuffer.Disposed">
            <summary>
            获取缓冲区是否被释放
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.NativeBuffer.Item(System.Int32)">
            <summary>
            获取/设置缓冲区指定索引的值
            </summary>
            <param name="index">数据的索引</param>
            <returns>索引处的数据</returns>
            <exception cref="T:System.ObjectDisposedException">当前对象已经被释放</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>超出范围</exception>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.Dispose">
            <summary>
            释放缓冲区内存
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.ToArray">
            <summary>
            将缓冲区转换为托管字节数组
            </summary>
            <returns>与当前对象等价的托管字节数组</returns>
            <exception cref="T:System.ObjectDisposedException">当前对象已经被释放</exception>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.CopyToArray(System.Byte[],System.Int32)">
            <summary>
            将缓冲区数据拷贝到托管字节数组中
            </summary>
            <param name="buffer">拷贝到的托管字节数组</param>
            <param name="startIndex">开始写入的索引位置</param>
            <returns>写入的数据长度</returns>
            <exception cref="T:System.ObjectDisposedException">当前对象已经被释放</exception>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/>长度不足</exception>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.GetEnumerator">
            <summary>
            遍历缓冲区的所有数据
            </summary>
            <returns>数据迭代器</returns>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.op_Explicit(Accelbuffer.Memory.NativeBuffer)~System.Byte*">
            <summary>
            获取对象内部维护的指针
            </summary>
            <param name="buffer">需要获取指针的对象</param>
        </member>
        <member name="M:Accelbuffer.Memory.NativeBuffer.op_Implicit(Accelbuffer.Memory.NativeBuffer)~System.Boolean">
            <summary>
            获取对象是否没有被释放
            </summary>
            <param name="buffer">需要查询状态的对象</param>
        </member>
        <member name="T:Accelbuffer.Memory.NativeMemory">
            <summary>
            表示一段自动变长的非托管内存
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.NativeMemory.Size">
            <summary>
            获取当前内存的大小，以字节为单位
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.NativeMemory.Dispose">
            <summary>
            释放内存
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.NativeMemory.GetPointer">
            <summary>
            获取内存的指针
            </summary>
            <returns>指向内存的指针，如果是null，则对象已经被释放</returns>
        </member>
        <member name="M:Accelbuffer.Memory.NativeMemory.GetPointer(System.Int32)">
            <summary>
            获取内存的指针，且保证内存的大小至少是<paramref name="minSize"/>
            </summary>
            <param name="minSize">获取的内存的最小值，以字节为单位</param>
            <returns>指向内存的指针</returns>
            <exception cref="T:System.ObjectDisposedException">当前内存已经被释放</exception>
        </member>
        <member name="M:Accelbuffer.Memory.NativeMemory.Allocate(System.Int32@)">
            <summary>
            分配一块可以自动变长的非托管内存
            </summary>
            <param name="size">内存的初始大小，这个值的大小在分配内存时可能被向上调整</param>
            <returns>内存对象</returns>
        </member>
        <member name="T:Accelbuffer.Memory.IMemorySizeForType`1">
            <summary>
            实现接口，在初始化时提供<typeparamref name="T"/>类型将占用内存的近似大小。
            如果实现这个接口的类型不实现<see cref="T:Accelbuffer.ITypeSerializer`1"/>，则这个接口的实现无效。
            在这个接口中设置的值的使用优先级大于使用<see cref="T:Accelbuffer.Memory.MemorySizeAttribute"/>设置的值。
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="P:Accelbuffer.Memory.IMemorySizeForType`1.ApproximateMemorySize">
            <summary>
            获取类型的对象将会占用的近似字节大小，这个值必须大于0且应该尽可能返回准确的值。
            在序列化时，会使用这个值进行第一次的内存分配，如果数值合理，可以避免realloc和memcpy的时间损失。
            在类型的大小不固定时，如果这个值有一个上限，可以考虑使用这个上限值。
            </summary>
        </member>
        <member name="T:Accelbuffer.Memory.MemorySizeAttribute">
            <summary>
            设置类型的序列化/反序列化选项
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.MemorySizeAttribute.ApproximateMemorySize">
            <summary>
            获取类型的对象将会占用的近似字节大小。
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.MemorySizeAttribute.#ctor(System.Int32)">
            <summary>
            初始化MemorySizeAttribute实例
            </summary>
            <param name="approximateMemorySize">
            类型的对象将会占用的近似字节大小，这个值必须大于0且应该尽可能传入准确的值。
            在序列化时，会使用这个值进行第一次的内存分配，如果数值合理，可以避免realloc和memcpy的时间损失。
            在类型的大小不固定时，如果这个值有一个上限，可以考虑使用这个上限值。
            </param>
        </member>
        <member name="T:Accelbuffer.Memory.MemoryAllocator">
            <summary>
            表示一个非托管内存分配器
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.MemoryAllocator.Shared">
            <summary>
            获取全局共享的内存分配器实例
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.MemoryAllocator.MaxFindChunkCount">
            <summary>
            获取/设置分配内存时，寻找合适内存块的最大次数
            </summary>
        </member>
        <member name="P:Accelbuffer.Memory.MemoryAllocator.TotalMemorySizeInChunks">
            <summary>
            获取当前保存的所有内存块的总内存大小，以字节为单位
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.MemoryAllocator.Finalize">
            <summary>
            释放所有内存
            </summary>
        </member>
        <member name="M:Accelbuffer.Memory.MemoryAllocator.Trim(System.Boolean)">
            <summary>
            释放多余的内存
            </summary>
            <param name="trimAll">指示是否释放所有的内存</param>
        </member>
        <member name="M:Accelbuffer.Memory.MemoryAllocator.Allocate(System.Int32@)">
            <summary>
            分配指定字节大小的内存，内存没有被初始化，可能包含一些随机的数据
            </summary>
            <param name="size">需要分配的字节大小，这个值的大小在分配内存时可能被向上调整</param>
            <returns>分配的内存指针，如果为null，则分配失败</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>是负数</exception>
        </member>
        <member name="M:Accelbuffer.Memory.MemoryAllocator.Free(System.Void*,System.Int32)">
            <summary>
            释放指定大小的内存
            </summary>
            <param name="p">指向内存的指针</param>
            <param name="size">内存的字节大小</param>
        </member>
        <member name="M:Accelbuffer.Memory.MemoryAllocator.Reallocate(System.Void*,System.Int32,System.Int32@)">
            <summary>
            重新分配一段内存的大小
            </summary>
            <param name="p">指向原内存的指针</param>
            <param name="oldSize">原内存的字节大小</param>
            <param name="newSize">新内存的字节大小，这个值的大小在重新分配内存时可能被向上调整</param>
            <returns>指向新内存的指针，如果为null，则分配失败</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/>为null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="oldSize"/>不是正数，或<paramref name="newSize"/>是负数</exception>
        </member>
        <member name="T:Accelbuffer.Endian">
            <summary>
            指示字节序
            </summary>
        </member>
        <member name="F:Accelbuffer.Endian.BigEndian">
            <summary>
            指示使用大端字节序（网络字节序）
            </summary>
        </member>
        <member name="F:Accelbuffer.Endian.LittleEndian">
            <summary>
            指示使用小端字节序
            </summary>
        </member>
        <member name="T:Accelbuffer.Text.Encodings">
            <summary>
            提供目前支持的字符串编码
            </summary>
        </member>
        <member name="P:Accelbuffer.Text.Encodings.ASCII">
            <summary>
            ASCII编码
            </summary>
        </member>
        <member name="P:Accelbuffer.Text.Encodings.Unicode">
            <summary>
            使用系统字节序的Unicode编码
            </summary>
        </member>
        <member name="P:Accelbuffer.Text.Encodings.ReversedUnicode">
            <summary>
            与系统字节序相反的Unicode编码
            </summary>
        </member>
        <member name="P:Accelbuffer.Text.Encodings.UTF8">
            <summary>
            UTF8编码
            </summary>
        </member>
        <member name="T:Accelbuffer.Text.IUnsafeEncoding">
            <summary>
            '不安全'的字符串编码转换器
            </summary>
        </member>
        <member name="M:Accelbuffer.Text.IUnsafeEncoding.GetBytes(System.String,System.Byte*)">
            <summary>
            将指定字符串中的一组字符编码为指定的字节数组
            </summary>
            <param name="str">字符串</param>
            <param name="bytes">字节数组指针</param>
            <returns>字节数量</returns>
        </member>
        <member name="M:Accelbuffer.Text.IUnsafeEncoding.GetString(System.Byte*,System.Int32)">
            <summary>
            将指定字节数组中的所有字节解码为一个字符串
            </summary>
            <param name="bytes">字节数组指针</param>
            <param name="byteCount">字节数量</param>
            <returns>解码的字符串</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount"/>的值错误</exception>
        </member>
        <member name="T:Accelbuffer.VInt">
            <summary>
            表示一个动态长度的有符号整数
            </summary>
        </member>
        <member name="T:Accelbuffer.VUInt">
            <summary>
            表示一个动态长度的无符号整数
            </summary>
        </member>
        <member name="T:Accelbuffer.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ASCIIStringByteCountError">
            <summary>
              查找类似 ASCII字符串的字节数量必须是非负数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.BoolName">
            <summary>
              查找类似 Boolean 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ByteArrayIsNull">
            <summary>
              查找类似 字节数组不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ByteArrayTooShort">
            <summary>
              查找类似 字节数组长度过小 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ByteName">
            <summary>
              查找类似 UInt8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.CharName">
            <summary>
              查找类似 Char 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Color32Name">
            <summary>
              查找类似 Color32 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ColorName">
            <summary>
              查找类似 Color 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.DecimalName">
            <summary>
              查找类似 Float128 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.DeserializeMethodName">
            <summary>
              查找类似 Deserialize 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.DoubleName">
            <summary>
              查找类似 Float64 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.FloatName">
            <summary>
              查找类似 Float32 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.GenericName">
            <summary>
              查找类似 Generic 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.HasNextName">
            <summary>
              查找类似 HasNext 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.IntName">
            <summary>
              查找类似 Int32 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.IntPtrName">
            <summary>
              查找类似 IntPtr 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.InvalidCastFormat">
            <summary>
              查找类似 不存在从{0}到{1}的隐式转换 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.InvalidFieldIndex">
            <summary>
              查找类似 字段的索引必须是 (0, 268435456] 范围内的整数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.InvalidSerializerType">
            <summary>
              查找类似 所有的序列化代理必须要实现ITypeSerializer&lt;T&gt;接口 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.InvalidUTF8Char">
            <summary>
              查找类似 UTF8字符的第一个字节的格式必须满足&apos;0vvvvvvv&apos;或&apos;110vvvvv&apos;或&apos;1110vvvv&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.LongName">
            <summary>
              查找类似 Int64 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.NotSupportHighRankArray">
            <summary>
              查找类似 不支持多维数组序列化与反序列化 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.NotSupportTypeInjection">
            <summary>
              查找类似 无法为{0}类型注入代理，因为类型没有无参构造方法 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.QuaternionName">
            <summary>
              查找类似 Quaternion 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ReadName">
            <summary>
              查找类似 Read 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SByteName">
            <summary>
              查找类似 Int8 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SerializeMethodName">
            <summary>
              查找类似 Serialize 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SerializerAssemblyName">
            <summary>
              查找类似 RuntimeSerializerAssembly.dll 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SerializerModuleName">
            <summary>
              查找类似 RuntimeSerializerModule 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SerializerTypeIsNull">
            <summary>
              查找类似 序列化代理类型不能为null 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SerializerTypeSuffix">
            <summary>
              查找类似 &lt;Serializer&gt; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ShortName">
            <summary>
              查找类似 Int16 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.SkipNextName">
            <summary>
              查找类似 SkipNext 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.StreamTooShort">
            <summary>
              查找类似 数据流的长度过小 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.StringName">
            <summary>
              查找类似 String 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.UIntName">
            <summary>
              查找类似 UInt32 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.UIntPtrName">
            <summary>
              查找类似 UIntPtr 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.ULongName">
            <summary>
              查找类似 UInt64 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.UnicodeStringByteCountError">
            <summary>
              查找类似 Unicode字符串的字节数量必须是非负偶数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.UShortName">
            <summary>
              查找类似 UInt16 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.UTF8StringByteCountError">
            <summary>
              查找类似 UTF8字符串的字节数量必须是非负数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Vector2IntName">
            <summary>
              查找类似 Vector2Int 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Vector2Name">
            <summary>
              查找类似 Vector2 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Vector3IntName">
            <summary>
              查找类似 Vector3Int 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Vector3Name">
            <summary>
              查找类似 Vector3 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.Vector4Name">
            <summary>
              查找类似 Vector4 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.VIntName">
            <summary>
              查找类似 VariantInt 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.VUIntName">
            <summary>
              查找类似 VariantUInt 的本地化字符串。
            </summary>
        </member>
        <member name="P:Accelbuffer.Properties.Resources.WriteValueMethodName">
            <summary>
              查找类似 WriteValue 的本地化字符串。
            </summary>
        </member>
        <member name="T:Accelbuffer.StreamTooShortException">
            <summary>
            数据流的长度过短错误
            </summary>
        </member>
        <member name="M:Accelbuffer.StreamTooShortException.#ctor">
            <summary>
            初始化 StreamTooShortException
            </summary>
        </member>
        <member name="M:Accelbuffer.StreamTooShortException.#ctor(System.String)">
            <summary>
            初始化 StreamTooShortException
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.StreamTooShortException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 StreamTooShortException
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.AccelReader">
            <summary>
            公开对字节数据的读取与转换接口
            </summary>
        </member>
        <member name="M:Accelbuffer.AccelReader.HasNext">
            <summary>
            获取是否还有下一个值
            </summary>
            <returns>如果还有值，返回true，否则，false</returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.HasNext(System.Int32@)">
            <summary>
            获取是否还有下一个值
            </summary>
            <param name="index">下一个值的索引</param>
            <returns>如果还有值，返回true，否则，false</returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.SkipNext">
            <summary>
            跳过下一个值
            </summary>
            <exception cref="T:System.NotSupportedException">下一个值的类型是非法的</exception>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadInt8">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadUInt8">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadUInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadVariantInt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadVariantUInt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadIntPtr">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadUIntPtr">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadFloat32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadFloat64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadFloat128">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadBoolean">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.AccelReader.ReadGeneric``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Accelbuffer.Encoding">
            <summary>
            表示字符串的编码
            </summary>
        </member>
        <member name="F:Accelbuffer.Encoding.UTF8">
            <summary>
            指示字符串使用UTF8进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.Encoding.Unicode">
            <summary>
            指示字符串使用Unicode进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.Encoding.ASCII">
            <summary>
            指示字符串使用ASCII进行编码
            </summary>
        </member>
        <member name="T:Accelbuffer.ITypeSerializer`1">
            <summary>
            实现接口完成指定类型对象的序列化和反序列化
            </summary>
            <typeparam name="T">序列化的对象的类型</typeparam>
        </member>
        <member name="M:Accelbuffer.ITypeSerializer`1.Serialize(`0,Accelbuffer.AccelWriter@)">
            <summary>
            方法用于实现对象的序列化
            </summary>
            <param name="obj">将被序列化的对象</param>
            <param name="writer">数据输出流</param>
        </member>
        <member name="M:Accelbuffer.ITypeSerializer`1.Deserialize(Accelbuffer.AccelReader@)">
            <summary>
            方法用于实现对象的反序列化
            </summary>
            <param name="reader">数据输入流</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="T:Accelbuffer.SerializeByAttribute">
            <summary>
            用于指定类型的序列化和反序列化代理的类型
            </summary>
        </member>
        <member name="P:Accelbuffer.SerializeByAttribute.SerializerType">
            <summary>
            获取序列化代理类型
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializeByAttribute.#ctor(System.Type)">
            <summary>
            初始化 SerializeByAttribute 实例，并指示运行时使用<paramref name="serializerType"/>类型实现序列化与反序列化
            </summary>
            <param name="serializerType">序列化代理类型</param>
        </member>
        <member name="T:Accelbuffer.Serializer">
            <summary>
            公开序列化对象的接口
            </summary>
        </member>
        <member name="M:Accelbuffer.Serializer.InitializeForType``1">
            <summary>
            初始化类型的序列化代理和内存分配器
            </summary>
            <typeparam name="T">需要初始化的类型</typeparam>
        </member>
        <member name="M:Accelbuffer.Serializer.Serialize``1(``0,Accelbuffer.Encoding,Accelbuffer.Endian)">
            <summary>
            序列化对象，并返回序列化数据（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <typeparam name="T">序列化的对象类型</typeparam>
            <param name="encoding"></param>
            <param name="endian"></param>
            <returns>对象的序列化结果</returns>
        </member>
        <member name="M:Accelbuffer.Serializer.Serialize``1(``0,System.Byte[]@,Accelbuffer.Encoding,Accelbuffer.Endian)">
            <summary>
            序列化对象，并将序列化数据写入指定的缓冲区中（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="buffer">对象的序列化结果</param>
            <typeparam name="T">序列化的对象类型</typeparam>
            <param name="encoding"></param>
            <param name="endian"></param>
            <exception cref="T:System.ArgumentException">字节数组容量不足</exception>
        </member>
        <member name="M:Accelbuffer.Serializer.Serialize``1(``0,System.Byte[],System.Int32,Accelbuffer.Encoding,Accelbuffer.Endian)">
            <summary>
            序列化对象，并将序列化数据写入指定的缓冲区中（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="buffer">用于接受序列化数据的缓冲区</param>
            <param name="index"><paramref name="buffer"/>开始写入的索引</param>
            <typeparam name="T">序列化的对象类型</typeparam>
            <param name="encoding"></param>
            <param name="endian"></param>
            <returns>序列化数据的大小</returns>
            <exception cref="T:System.ArgumentException">字节数组容量不足</exception>
        </member>
        <member name="M:Accelbuffer.Serializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            反序列化<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="bytes">被反序列化的字节数组</param>
            <param name="index">开始读取的索引位置</param>
            <param name="length">可以读取的字节大小</param>
            <typeparam name="T">反序列化的对象类型</typeparam>
            <returns>反序列化的对象实例</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/>为null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bytes"/>长度不足</exception>
        </member>
        <member name="M:Accelbuffer.Serializer.Deserialize``1(Accelbuffer.Memory.NativeBuffer,System.Int32,System.Int32)">
            <summary>
            反序列化<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="buffer">被反序列化的字节缓冲区</param>
            <param name="index">开始读取的索引位置</param>
            <param name="length">可以读取的字节大小</param>
            <typeparam name="T">反序列化的对象类型</typeparam>
            <returns>反序列化的对象实例</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/>已经被释放</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="buffer"/>长度不足</exception>
        </member>
        <member name="T:Accelbuffer.ObjectType">
            <summary>
            表示一个对象的数据类型（4位）
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Missing">
            <summary>
            丢失的类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed8">
            <summary>
            8位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed16">
            <summary>
            16位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed24">
            <summary>
            24位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed32">
            <summary>
            32位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed40">
            <summary>
            40位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed48">
            <summary>
            48位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed56">
            <summary>
            56位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed64">
            <summary>
            64位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed72">
            <summary>
            72位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed80">
            <summary>
            80位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed88">
            <summary>
            88位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed96">
            <summary>
            96位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed104">
            <summary>
            104位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.Fixed128">
            <summary>
            128位固定长度类型
            </summary>
        </member>
        <member name="F:Accelbuffer.ObjectType.LengthPrefixed">
            <summary>
            前缀长度类型（Variant字节长度 + N字节数据）
            </summary>
        </member>
        <member name="T:Accelbuffer.AccelWriter">
            <summary>
            公开对字节数据的写入接口
            </summary>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.SByte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.UInt64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,Accelbuffer.VInt)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,Accelbuffer.VUInt)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.UIntPtr)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Decimal)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.Char)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.AccelWriter.WriteValue``1(System.Int32,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <param name="value"></param>
        </member>
    </members>
</doc>
