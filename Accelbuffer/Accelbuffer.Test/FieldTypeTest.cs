//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 扩展类型请使用partial关键字在其他文件扩展，否则更改可能会丢失。
namespace Accelbuffer.Test
{
    using Accelbuffer;
    using Accelbuffer.Injection;
    using Accelbuffer.Memory;
    using Accelbuffer.Unsafe.Text;
    using System;
    using boolean = System.Boolean;
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;
    using float32 = System.Single;
    using float64 = System.Double;
    using float128 = System.Decimal;
    using intptr = System.IntPtr;
    using uintptr = System.UIntPtr;
    using vint = Accelbuffer.VInt;
    using vuint = Accelbuffer.VUInt;
    using System.Collections.Generic;
    
    
    [MemorySize(256)]
    [SerializeBy(typeof(FieldTypeTest.FieldTypeTestSerializer))]
    internal partial struct FieldTypeTest
    {
        
        [NeverNull()]
        [SerialIndex(1)]
        private int8 m_Field0;
        
        [NeverNull()]
        [SerialIndex(2)]
        private uint8 m_Field1;
        
        [NeverNull()]
        [SerialIndex(3)]
        private int16 m_Field2;
        
        [NeverNull()]
        [SerialIndex(4)]
        private uint16 m_Field3;
        
        [NeverNull()]
        [SerialIndex(5)]
        private int32 m_Field4;
        
        [NeverNull()]
        [SerialIndex(6)]
        private uint32 m_Field5;
        
        [NeverNull()]
        [SerialIndex(7)]
        private int64 m_Field6;
        
        [NeverNull()]
        [SerialIndex(8)]
        private uint64 m_Field7;
        
        [NeverNull()]
        [SerialIndex(9)]
        private boolean m_Field8;
        
        [NeverNull()]
        [SerialIndex(10)]
        private float32 m_Field9;
        
        [NeverNull()]
        [SerialIndex(11)]
        private float64 m_Field10;
        
        [NeverNull()]
        [SerialIndex(12)]
        private float128 m_Field11;
        
        [NeverNull()]
        [SerialIndex(13)]
        private intptr m_Field12;
        
        [NeverNull()]
        [SerialIndex(14)]
        private uintptr m_Field13;
        
        [NeverNull()]
        [SerialIndex(15)]
        private vint m_Field14;
        
        [NeverNull()]
        [SerialIndex(16)]
        private vuint m_Field15;
        
        [NeverNull()]
        [SerialIndex(17)]
        private char m_Field16;
        
        [SerialIndex(18)]
        private string m_Field17;
        
        [SerialIndex(19)]
        private vint[] m_Field18;
        
        [SerialIndex(20)]
        private Dictionary<string,float32> m_Field19;
        
        [SerialIndex(21)]
        private List<boolean> m_Field20;
        
        [NeverNull()]
        [SerialIndex(22)]
        private KeyValuePair<boolean,boolean> m_Field21;
        
        [SerialIndex(23)]
        private vint? m_Field22;
        
        [SerialIndex(24)]
        private Type m_Field23;
        
        [NeverNull()]
        [SerialIndex(25)]
        private Guid m_Field24;
        
        [NeverNull()]
        [SerialIndex(26)]
        private TimeSpan m_Field25;
        
        [NeverNull()]
        [SerialIndex(27)]
        private DateTime m_Field26;
        
        [NeverNull()]
        [SerialIndex(28)]
        private DateTimeOffset m_Field27;
        
        [NeverNull()]
        [SerialIndex(29)]
        private TestEnum m_Field28;
        
partial void OnBeforeSerialization();
partial void OnAfterDeserialization();
        
        public int8 Field0
        {
            get
            {
                return this.m_Field0;
            }
            set
            {
                this.m_Field0 = value;
            }
        }
        
        public uint8 Field1
        {
            get
            {
                return this.m_Field1;
            }
            set
            {
                this.m_Field1 = value;
            }
        }
        
        public int16 Field2
        {
            get
            {
                return this.m_Field2;
            }
            set
            {
                this.m_Field2 = value;
            }
        }
        
        public uint16 Field3
        {
            get
            {
                return this.m_Field3;
            }
            set
            {
                this.m_Field3 = value;
            }
        }
        
        public int32 Field4
        {
            get
            {
                return this.m_Field4;
            }
            set
            {
                this.m_Field4 = value;
            }
        }
        
        public uint32 Field5
        {
            get
            {
                return this.m_Field5;
            }
            set
            {
                this.m_Field5 = value;
            }
        }
        
        public int64 Field6
        {
            get
            {
                return this.m_Field6;
            }
            set
            {
                this.m_Field6 = value;
            }
        }
        
        public uint64 Field7
        {
            get
            {
                return this.m_Field7;
            }
            set
            {
                this.m_Field7 = value;
            }
        }
        
        public boolean Field8
        {
            get
            {
                return this.m_Field8;
            }
            set
            {
                this.m_Field8 = value;
            }
        }
        
        public float32 Field9
        {
            get
            {
                return this.m_Field9;
            }
            set
            {
                this.m_Field9 = value;
            }
        }
        
        public float64 Field10
        {
            get
            {
                return this.m_Field10;
            }
            set
            {
                this.m_Field10 = value;
            }
        }
        
        public float128 Field11
        {
            get
            {
                return this.m_Field11;
            }
            set
            {
                this.m_Field11 = value;
            }
        }
        
        public intptr Field12
        {
            get
            {
                return this.m_Field12;
            }
            set
            {
                this.m_Field12 = value;
            }
        }
        
        public uintptr Field13
        {
            get
            {
                return this.m_Field13;
            }
            set
            {
                this.m_Field13 = value;
            }
        }
        
        public vint Field14
        {
            get
            {
                return this.m_Field14;
            }
            set
            {
                this.m_Field14 = value;
            }
        }
        
        public vuint Field15
        {
            get
            {
                return this.m_Field15;
            }
            set
            {
                this.m_Field15 = value;
            }
        }
        
        public char Field16
        {
            get
            {
                return this.m_Field16;
            }
            set
            {
                this.m_Field16 = value;
            }
        }
        
        public string Field17
        {
            get
            {
                return this.m_Field17;
            }
            set
            {
                this.m_Field17 = value;
            }
        }
        
        public vint[] Field18
        {
            get
            {
                return this.m_Field18;
            }
            set
            {
                this.m_Field18 = value;
            }
        }
        
        public Dictionary<string,float32> Field19
        {
            get
            {
                return this.m_Field19;
            }
            set
            {
                this.m_Field19 = value;
            }
        }
        
        public List<boolean> Field20
        {
            get
            {
                return this.m_Field20;
            }
            set
            {
                this.m_Field20 = value;
            }
        }
        
        public KeyValuePair<boolean,boolean> Field21
        {
            get
            {
                return this.m_Field21;
            }
            set
            {
                this.m_Field21 = value;
            }
        }
        
        public vint? Field22
        {
            get
            {
                return this.m_Field22;
            }
            set
            {
                this.m_Field22 = value;
            }
        }
        
        public Type Field23
        {
            get
            {
                return this.m_Field23;
            }
            set
            {
                this.m_Field23 = value;
            }
        }
        
        public Guid Field24
        {
            get
            {
                return this.m_Field24;
            }
            set
            {
                this.m_Field24 = value;
            }
        }
        
        public TimeSpan Field25
        {
            get
            {
                return this.m_Field25;
            }
            set
            {
                this.m_Field25 = value;
            }
        }
        
        public DateTime Field26
        {
            get
            {
                return this.m_Field26;
            }
            set
            {
                this.m_Field26 = value;
            }
        }
        
        public DateTimeOffset Field27
        {
            get
            {
                return this.m_Field27;
            }
            set
            {
                this.m_Field27 = value;
            }
        }
        
        public TestEnum Field28
        {
            get
            {
                return this.m_Field28;
            }
            set
            {
                this.m_Field28 = value;
            }
        }
        
        public sealed class FieldTypeTestSerializer : object, ITypeSerializer<FieldTypeTest>
        {
            
            public void Serialize(FieldTypeTest obj, ref AccelWriter writer)
            {
                obj.OnBeforeSerialization();
                writer.WriteValue(1, obj.m_Field0);
                writer.WriteValue(2, obj.m_Field1);
                writer.WriteValue(3, obj.m_Field2);
                writer.WriteValue(4, obj.m_Field3);
                writer.WriteValue(5, obj.m_Field4);
                writer.WriteValue(6, obj.m_Field5);
                writer.WriteValue(7, obj.m_Field6);
                writer.WriteValue(8, obj.m_Field7);
                writer.WriteValue(9, obj.m_Field8);
                writer.WriteValue(10, obj.m_Field9);
                writer.WriteValue(11, obj.m_Field10);
                writer.WriteValue(12, obj.m_Field11);
                writer.WriteValue(13, obj.m_Field12);
                writer.WriteValue(14, obj.m_Field13);
                writer.WriteValue(15, obj.m_Field14);
                writer.WriteValue(16, obj.m_Field15);
                writer.WriteValue(17, obj.m_Field16);
                if ((obj.m_Field17 != null))
                {
                    writer.WriteValue(18, obj.m_Field17);
                }
                if ((obj.m_Field18 != null))
                {
                    writer.WriteValue(19, obj.m_Field18);
                }
                if ((obj.m_Field19 != null))
                {
                    writer.WriteValue(20, obj.m_Field19);
                }
                if ((obj.m_Field20 != null))
                {
                    writer.WriteValue(21, obj.m_Field20);
                }
                writer.WriteValue(22, obj.m_Field21);
                if ((obj.m_Field22 != null))
                {
                    writer.WriteValue(23, obj.m_Field22);
                }
                if ((obj.m_Field23 != null))
                {
                    writer.WriteValue(24, obj.m_Field23);
                }
                writer.WriteValue(25, obj.m_Field24);
                writer.WriteValue(26, obj.m_Field25);
                writer.WriteValue(27, obj.m_Field26);
                writer.WriteValue(28, obj.m_Field27);
                writer.WriteValue(29, ((int32)(obj.m_Field28)));
            }
            
            public FieldTypeTest Deserialize(ref AccelReader reader)
            {
                FieldTypeTest result = new FieldTypeTest();
                int index;
			while (reader.HasNext(out index))
			{
				switch (index)
				{
					case 1:
						result.m_Field0 = reader.ReadInt8();
						break;
					case 2:
						result.m_Field1 = reader.ReadUInt8();
						break;
					case 3:
						result.m_Field2 = reader.ReadInt16();
						break;
					case 4:
						result.m_Field3 = reader.ReadUInt16();
						break;
					case 5:
						result.m_Field4 = reader.ReadInt32();
						break;
					case 6:
						result.m_Field5 = reader.ReadUInt32();
						break;
					case 7:
						result.m_Field6 = reader.ReadInt64();
						break;
					case 8:
						result.m_Field7 = reader.ReadUInt64();
						break;
					case 9:
						result.m_Field8 = reader.ReadBoolean();
						break;
					case 10:
						result.m_Field9 = reader.ReadFloat32();
						break;
					case 11:
						result.m_Field10 = reader.ReadFloat64();
						break;
					case 12:
						result.m_Field11 = reader.ReadFloat128();
						break;
					case 13:
						result.m_Field12 = reader.ReadIntPtr();
						break;
					case 14:
						result.m_Field13 = reader.ReadUIntPtr();
						break;
					case 15:
						result.m_Field14 = reader.ReadVariantInt();
						break;
					case 16:
						result.m_Field15 = reader.ReadVariantUInt();
						break;
					case 17:
						result.m_Field16 = reader.ReadChar();
						break;
					case 18:
						result.m_Field17 = reader.ReadString();
						break;
					case 19:
						result.m_Field18 = reader.ReadGeneric<vint[]>();
						break;
					case 20:
						result.m_Field19 = reader.ReadGeneric<Dictionary<string,float32>>();
						break;
					case 21:
						result.m_Field20 = reader.ReadGeneric<List<boolean>>();
						break;
					case 22:
						result.m_Field21 = reader.ReadGeneric<KeyValuePair<boolean,boolean>>();
						break;
					case 23:
						result.m_Field22 = reader.ReadGeneric<vint?>();
						break;
					case 24:
						result.m_Field23 = reader.ReadGeneric<Type>();
						break;
					case 25:
						result.m_Field24 = reader.ReadGeneric<Guid>();
						break;
					case 26:
						result.m_Field25 = reader.ReadGeneric<TimeSpan>();
						break;
					case 27:
						result.m_Field26 = reader.ReadGeneric<DateTime>();
						break;
					case 28:
						result.m_Field27 = reader.ReadGeneric<DateTimeOffset>();
						break;
					case 29:
						result.m_Field28 = (TestEnum)reader.ReadInt32();
						break;
					default:
						reader.SkipNext();
						break;
				}
			}

                result.OnAfterDeserialization();
                return result;
            }
        }
    }
}
