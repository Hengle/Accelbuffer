<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accelbuffer</name>
    </assembly>
    <members>
        <member name="T:Accelbuffer.InitialMemorySizeAttribute">
            <summary>
            指定<see cref="T:Accelbuffer.UnmanagedMemoryAllocator"/>初始内存分配大小
            </summary>
        </member>
        <member name="P:Accelbuffer.InitialMemorySizeAttribute.InitialSize">
            <summary>
            获取初始的内存分配大小，以字节为单位
            </summary>
        </member>
        <member name="M:Accelbuffer.InitialMemorySizeAttribute.#ctor(System.Int64)">
            <summary>
            创建 InitialMemorySizeAttribute 实例
            </summary>
            <param name="initialSize">获取初始的内存分配大小，以字节为单位</param>
        </member>
        <member name="T:Accelbuffer.UnmanagedMemoryAllocator">
            <summary>
            公开对非托管缓冲区内存的操作权限
            </summary>
        </member>
        <member name="P:Accelbuffer.UnmanagedMemoryAllocator.DefaultInitialSize">
            <summary>
            获取/设置默认初始内存分配大小
            </summary>
        </member>
        <member name="M:Accelbuffer.UnmanagedMemoryAllocator.FreeAllMemory">
            <summary>
            释放所有使用<see cref="T:Accelbuffer.UnmanagedMemoryAllocator"/>分配的内存
            </summary>
        </member>
        <member name="P:Accelbuffer.UnmanagedMemoryAllocator.InitialSize">
            <summary>
            获取/设置初始化内存时应该分配的字节大小
            </summary>
        </member>
        <member name="P:Accelbuffer.UnmanagedMemoryAllocator.AllocatedSize">
            <summary>
            获取 当前分配的内存大小，以字节为单位
            </summary>
        </member>
        <member name="M:Accelbuffer.UnmanagedMemoryAllocator.FreeMemory">
            <summary>
            释放当前分配的内存
            </summary>
            <exception cref="T:System.InvalidOperationException">分配的内存当前正在被使用</exception>
        </member>
        <member name="T:Accelbuffer.Runtime.Injection.SerializationCallbackAttribute">
            <summary>
            指定一个方法为序列化回调方法
            </summary>
        </member>
        <member name="P:Accelbuffer.Runtime.Injection.SerializationCallbackAttribute.CallbackMethodType">
            <summary>
            获取序列化回调方法类型
            </summary>
        </member>
        <member name="P:Accelbuffer.Runtime.Injection.SerializationCallbackAttribute.Priority">
            <summary>
            获取/设置调用优先级
            </summary>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.SerializationCallbackAttribute.#ctor(Accelbuffer.SerializationCallbackMethod)">
            <summary>
            初始化 SerializationCallbackAttribute
            </summary>
            <param name="method">序列化回调方法类型</param>
        </member>
        <member name="T:Accelbuffer.Runtime.Injection.NumberTypeAttribute">
            <summary>
            指示字段作为数字被序列化的类型，
            该特性只对 
            <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/> 
            类型和这些类型的集合的字段有效
            </summary>
        </member>
        <member name="P:Accelbuffer.Runtime.Injection.NumberTypeAttribute.NumberType">
            <summary>
            获取数字序列化类型
            </summary>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.NumberTypeAttribute.#ctor(Accelbuffer.Number)">
            <summary>
            初始化 NumberTypeAttribute 类型
            </summary>
            <param name="type">数字的类型选项</param>
        </member>
        <member name="T:Accelbuffer.Runtime.Injection.EncodingAttribute">
            <summary>
            指示字段使用指定的编码被序列化，该特性只对 <see cref="T:System.Char"/>, <see cref="T:System.String"/> 类型和这两个类型构成的集合的字段有效
            </summary>
        </member>
        <member name="P:Accelbuffer.Runtime.Injection.EncodingAttribute.Encoding">
            <summary>
            获取字符的编码
            </summary>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.EncodingAttribute.#ctor(Accelbuffer.CharEncoding)">
            <summary>
            初始化 EncodingAttribute 实例
            </summary>
            <param name="encoding">字符序列化使用的编码</param>
        </member>
        <member name="T:Accelbuffer.Runtime.Injection.FieldIndexAttribute">
            <summary>
            指示字段的索引
            </summary>
        </member>
        <member name="P:Accelbuffer.Runtime.Injection.FieldIndexAttribute.Index">
            <summary>
            获取索引
            </summary>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.FieldIndexAttribute.#ctor(System.Byte)">
            <summary>
            初始化 FieldIndexAttribute 实例
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="T:Accelbuffer.Runtime.Injection.SerializeProxyInjector">
            <summary>
            公开对序列化代理的操作权限
            </summary>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.SerializeProxyInjector.AddBinding``2">
            <summary>
            添加一个序列化代理的绑定，如果已经存在，则覆盖
            </summary>
            <typeparam name="TObject">序列化对象类型</typeparam>
            <typeparam name="TProxy">被绑定的代理类型</typeparam>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.SerializeProxyInjector.AddBinding(System.Type,System.Type)">
            <summary>
            添加一个序列化代理的绑定，如果已经存在，则覆盖
            </summary>
            <param name="objectType">序列化对象类型</param>
            <param name="proxyType">被绑定的代理类型</param>
            <exception cref="T:System.InvalidCastException"><paramref name="proxyType"/>类型错误</exception>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.SerializeProxyInjector.HasBinding``1">
            <summary>
            获取是否已经存在绑定
            </summary>
            <typeparam name="TObject">序列化对象类型</typeparam>
            <returns>如果已经存在，返回true，否则，false</returns>
        </member>
        <member name="M:Accelbuffer.Runtime.Injection.SerializeProxyInjector.HasBinding(System.Type)">
            <summary>
            获取是否已经存在绑定
            </summary>
            <param name="objectType">序列化对象类型</param>
            <returns>如果已经存在，返回true，否则，false</returns>
        </member>
        <member name="T:Accelbuffer.StrictSerializationAttribute">
            <summary>
            指示对类型使用严格序列化模式（开启对序列化索引的严格匹配）
            </summary>
        </member>
        <member name="T:Accelbuffer.Number">
            <summary>
            数字类型选项
            </summary>
        </member>
        <member name="F:Accelbuffer.Number.Fixed">
            <summary>
            指示数字使用固定长度编码
            </summary>
        </member>
        <member name="F:Accelbuffer.Number.Var">
            <summary>
            指示数字使用动态长度编码
            </summary>
        </member>
        <member name="T:Accelbuffer.SerializationCallbackMethod">
            <summary>
            指示一个序列化回调方法类型
            </summary>
        </member>
        <member name="F:Accelbuffer.SerializationCallbackMethod.OnBeforeSerialize">
            <summary>
            在被序列化前调用
            </summary>
        </member>
        <member name="F:Accelbuffer.SerializationCallbackMethod.OnAfterDeserialize">
            <summary>
            在被反序列化后调用
            </summary>
        </member>
        <member name="T:Accelbuffer.UnmanagedReader">
            <summary>
            使用特定编码将二进制值读取为基元类型
            </summary>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadByte">
            <summary>
            从内部缓冲区中读取一个字节并返回
            </summary>
            <returns>读取的字节</returns>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区已经读取至末尾</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从内部缓冲区读取<paramref name="length"/>个字节并写入<paramref name="buffer"/>中
            </summary>
            <param name="buffer">写入数据的缓冲区</param>
            <param name="bufferIndex">开始写入数据的索引</param>
            <param name="length">读取的字节长度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>为null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/>是负数或buffer长度不足</exception>
            <exception cref="T:System.IndexOutOfRangeException">内部缓冲区长度不足</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableInt8(System.Byte)">
            <summary>
            读取一个动态长度的8位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableUInt8(System.Byte)">
            <summary>
            读取一个动态长度的8位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableInt16(System.Byte)">
            <summary>
            读取一个动态长度的16位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableUInt16(System.Byte)">
            <summary>
            读取一个动态长度的16位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableInt32(System.Byte)">
            <summary>
            读取一个动态长度的32位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableUInt32(System.Byte)">
            <summary>
            读取一个动态长度的32位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableInt64(System.Byte)">
            <summary>
            读取一个动态长度的64位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableUInt64(System.Byte)">
            <summary>
            读取一个动态长度的64位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedInt8(System.Byte)">
            <summary>
            读取一个固定长度的8位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedUInt8(System.Byte)">
            <summary>
            读取一个固定长度的8位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedInt16(System.Byte)">
            <summary>
            读取一个固定长度的16位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedUInt16(System.Byte)">
            <summary>
            读取一个固定长度的16位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedInt32(System.Byte)">
            <summary>
            读取一个固定长度的32位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedUInt32(System.Byte)">
            <summary>
            读取一个固定长度的32位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedInt64(System.Byte)">
            <summary>
            读取一个固定长度的64位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedUInt64(System.Byte)">
            <summary>
            读取一个固定长度的64位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadBoolean(System.Byte)">
            <summary>
            读取一个布尔值
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取的布尔值</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadChar(System.Byte,Accelbuffer.CharEncoding)">
            <summary>
            使用指定编码读取一个字符
            </summary>
            <param name="index">序列化索引</param>
            <param name="encoding">字符编码类型</param>
            <returns>读取的字符</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
            <exception cref="T:System.Text.DecoderFallbackException">字符解码发生回退</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableFloat32(System.Byte)">
            <summary>
            读取一个动态长度的32位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadVariableFloat64(System.Byte)">
            <summary>
            读取一个动态长度的64位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedFloat32(System.Byte)">
            <summary>
            读取一个固定长度的32位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadFixedFloat64(System.Byte)">
            <summary>
            读取一个固定长度的64位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <returns>读取数字</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedReader.ReadString(System.Byte,Accelbuffer.CharEncoding)">
            <summary>
            使用一个编码读取一个字符串
            </summary>
            <param name="index">序列化索引</param>
            <param name="encoding">字符编码类型</param>
            <returns>读取的字符串</returns>
            <exception cref="T:Accelbuffer.MissingSerializedValueException">（StrictMode下）序列化数据丢失</exception>
            <exception cref="T:System.IndexOutOfRangeException">缓冲区长度不足</exception>
            <exception cref="T:Accelbuffer.TagDismatchException">序列化标签不匹配</exception>
            <exception cref="T:System.Text.DecoderFallbackException">字符串解码发生回退</exception>
        </member>
        <member name="T:Accelbuffer.UnmanagedWriter">
            <summary>
            使用特定编码将可被序列化的基元类型写为二进制值
            </summary>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteByte(System.Byte)">
            <summary>
            写入一个字节
            </summary>
            <param name="b">写入的字节</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入<paramref name="bytes"/>
            </summary>
            <param name="bytes">写入的字节</param>
            <param name="index">起始的索引位置</param>
            <param name="length">写入的字节长度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/>是null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bytes"/>长度不足</exception>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.SByte,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个8位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Byte,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个8位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Int32,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个32位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.UInt32,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个32位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Int16,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个16位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.UInt16,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个16位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Int64,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个64位有符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.UInt64,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个64位无符号整数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Boolean)">
            <summary>
            写入一个布尔值
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Char,Accelbuffer.CharEncoding)">
            <summary>
            使用指定编码写入一个字符
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="encoding">编码类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Single,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个32位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.Double,Accelbuffer.Number)">
            <summary>
            使用指定类型写入一个64位浮点数
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="type">数字序列化类型</param>
        </member>
        <member name="M:Accelbuffer.UnmanagedWriter.WriteValue(System.Byte,System.String,Accelbuffer.CharEncoding)">
            <summary>
            使用指定编码写入一个字符串
            </summary>
            <param name="index">序列化索引</param>
            <param name="value">需要写入的值</param>
            <param name="encoding">编码类型</param>
        </member>
        <member name="T:Accelbuffer.CharEncoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.Unicode">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.Unicode"/> 进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.ASCII">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.ASCII"/> 进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.UTF8">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.UTF8"/> 进行编码
            </summary>
        </member>
        <member name="T:Accelbuffer.CharType">
            <summary>
            字符数据的类型（1位）
            </summary>
        </member>
        <member name="F:Accelbuffer.CharType.SingleChar">
            <summary>
            表示字符类型是单个字符
            </summary>
        </member>
        <member name="F:Accelbuffer.CharType.String">
            <summary>
            表示字符类型是字符串
            </summary>
        </member>
        <member name="T:Accelbuffer.NumberSign">
            <summary>
            数字符号（1位）
            </summary>
        </member>
        <member name="F:Accelbuffer.NumberSign.PositiveOrUnsigned">
            <summary>
            表示数字为正数或者无符号
            </summary>
        </member>
        <member name="F:Accelbuffer.NumberSign.Negative">
            <summary>
            表示数字为负数
            </summary>
        </member>
        <member name="T:Accelbuffer.ISerializableEnumerable`1">
            <summary>
            公开可序列化枚举数，该枚举数支持在指定类型的集合上进行简单迭代并且可以被序列化。
            如果集合类型是引用类型，则必须有无参构造函数
            </summary>
            <typeparam name="T">要枚举或序列化的对象的类型</typeparam>
        </member>
        <member name="P:Accelbuffer.ISerializableEnumerable`1.Count">
            <summary>
            获取元素的数量
            </summary>
        </member>
        <member name="M:Accelbuffer.ISerializableEnumerable`1.Add(`0)">
            <summary>
            添加一个元素
            </summary>
            <param name="value">添加的元素</param>
        </member>
        <member name="M:Accelbuffer.ISerializableEnumerable`1.Initialize(System.Int32)">
            <summary>
            使用指定大小初始化集合
            </summary>
            <param name="capacity">集合初始大小</param>
        </member>
        <member name="T:Accelbuffer.ISerializeProxy`1">
            <summary>
            实现接口完成<typeparamref name="T"/>类型对象的序列化代理
            </summary>
            <typeparam name="T">指定序列化的类型</typeparam>
        </member>
        <member name="M:Accelbuffer.ISerializeProxy`1.Serialize(`0,Accelbuffer.UnmanagedWriter@)">
            <summary>
            方法用于实现<typeparamref name="T"/>类型对象的序列化
            </summary>
            <param name="obj">将被序列化的对象</param>
            <param name="writer">数据输出流</param>
        </member>
        <member name="M:Accelbuffer.ISerializeProxy`1.Deserialize(Accelbuffer.UnmanagedReader@)">
            <summary>
            方法用于实现<typeparamref name="T"/>类型对象的反序列化
            </summary>
            <param name="reader">数据输入流</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="T:Accelbuffer.MissingSerializedValueException">
            <summary>
            指定序列化索引值未找到错误
            </summary>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor(System.String)">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.SerializeByAttribute">
            <summary>
            用于指定 类型/结构/接口 序列化的代理
            </summary>
        </member>
        <member name="P:Accelbuffer.SerializeByAttribute.ProxyType">
            <summary>
            获取序列化代理类型
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializeByAttribute.#ctor(System.Type)">
            <summary>
            初始化 SerializeByAttribute 实例，并指示运行时使用<paramref name="proxyType"/>类型作为序列化代理
            </summary>
            <param name="proxyType">序列化代理类型</param>
        </member>
        <member name="T:Accelbuffer.Serializer`1">
            <summary>
            公开序列化<typeparamref name="T"/>类型对象的接口
            </summary>
            <typeparam name="T">序列化类型</typeparam>
        </member>
        <member name="P:Accelbuffer.Serializer`1.StrictMode">
            <summary>
            获取/设置是否使用严格模式（严格模式会开启对序列化索引的严格匹配）
            </summary>
        </member>
        <member name="P:Accelbuffer.Serializer`1.Allocator">
            <summary>
            当前类型分配的缓冲区内存管理器
            </summary>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0)">
            <summary>
            序列化对象，并返回序列化数据（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <returns>对象的序列化结果</returns>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0,System.Byte[],System.Int64)">
            <summary>
            序列化对象，并将序列化数据写入指定的缓冲区中（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="buffer">用于接受序列化数据的缓冲区</param>
            <param name="index"><paramref name="buffer"/>开始写入的索引</param>
            <returns>序列化数据的大小</returns>
            <exception cref="T:System.ArgumentException">字节数组容量不足</exception>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0,Accelbuffer.UnmanagedWriter@)">
            <summary>
            序列化对象，并写入序列化数据
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="writer">数据输出流</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/>是不合法的</exception>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Deserialize(System.Byte[],System.Int64,System.Int64)">
            <summary>
            反序列化<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="bytes">被反序列化的字节数组</param>
            <param name="index">开始读取的索引位置</param>
            <param name="length">可以读取的字节大小</param>
            <returns>反序列化的对象实例</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/>为null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bytes"/>长度不足</exception>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Deserialize(Accelbuffer.UnmanagedReader@)">
            <summary>
            反序列化<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="reader">数据输入流</param>
            <returns>反序列化的对象实例</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/>是不合法的</exception>
        </member>
        <member name="T:Accelbuffer.TagDismatchException">
            <summary>
            标签不匹配错误
            </summary>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor(System.String)">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.ValueTypeCode">
            <summary>
            数据类型码（3位）
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.VariableInteger">
            <summary>
            动态长度的整数(0-64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.FixedInteger">
            <summary>
            固定长度的整数(0b, 8b, 16b, 32b, 64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.VariableFloat">
            <summary>
            动态长度的浮点数(0-64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.FixedFloat">
            <summary>
            固定长度的浮点数(0b, 32b, 64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.Boolean">
            <summary>
            布尔值(true or false)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.Char">
            <summary>
            字符值(char or string)
            </summary>
        </member>
        <member name="T:Accelbuffer.TagUtility">
            <summary>
            提供对数据标签创建和读取的接口
            </summary>
        </member>
    </members>
</doc>
