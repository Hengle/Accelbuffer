<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accelbuffer</name>
    </assembly>
    <members>
        <member name="T:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.VariableNumberAttribute">
            <summary>
            指示字段作为动态长度的数字被序列化，
            该特性只对 
            <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/> 
            类型的字段有效
            </summary>
        </member>
        <member name="T:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.EncodingAttribute">
            <summary>
            指示字段使用指定的编码被序列化，该特性只对 <see cref="T:System.Char"/> 和 <see cref="T:System.String"/> 类型的字段有效
            </summary>
        </member>
        <member name="P:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.EncodingAttribute.Encoding">
            <summary>
            获取字符的编码
            </summary>
        </member>
        <member name="M:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.EncodingAttribute.#ctor(Accelbuffer.CharEncoding)">
            <summary>
            初始化 EncodingAttribute 实例
            </summary>
            <param name="encoding">字符序列化使用的编码</param>
        </member>
        <member name="T:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeIndexAttribute">
            <summary>
            指示字段参与序列化，且拥有指定的索引值
            </summary>
        </member>
        <member name="P:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeIndexAttribute.SerializeIndex">
            <summary>
            获取 序列化索引
            </summary>
        </member>
        <member name="M:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeIndexAttribute.#ctor(System.Byte)">
            <summary>
            初始化 SerializeIndexAttribute 实例
            </summary>
            <param name="serializeIndex">序列化索引</param>
        </member>
        <member name="T:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeProxyUtility">
            <summary>
            公开对序列化代理运行时注入的接口
            </summary>
        </member>
        <member name="P:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeProxyUtility.AssemblyBuilder">
            <summary>
            此属性用于测试，当代理注入功能完成时，将移除该属性
            </summary>
        </member>
        <member name="M:Accelbuffer.Experimental.RuntimeSerializeProxyInjection.SerializeProxyUtility.GenerateProxy(System.Type)">
            <summary>
            注入指定类型对象的序列化代理
            </summary>
            <param name="objType">被序列化的对象类型</param>
            <returns>注入的序列化代理类型</returns>
        </member>
        <member name="T:Accelbuffer.CharEncoding">
            <summary>
            字符编码（2位）
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.Unicode">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.Unicode"/> 进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.ASCII">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.ASCII"/> 进行编码
            </summary>
        </member>
        <member name="F:Accelbuffer.CharEncoding.UTF8">
            <summary>
            指示字符使用 <see cref="P:System.Text.Encoding.UTF8"/> 进行编码
            </summary>
        </member>
        <member name="T:Accelbuffer.CharType">
            <summary>
            字符数据的类型（1位）
            </summary>
        </member>
        <member name="F:Accelbuffer.CharType.SingleChar">
            <summary>
            表示字符类型是单个字符
            </summary>
        </member>
        <member name="F:Accelbuffer.CharType.String">
            <summary>
            表示字符类型是字符串
            </summary>
        </member>
        <member name="T:Accelbuffer.InputBuffer">
            <summary>
            用于输入数据的缓冲区
            </summary>
        </member>
        <member name="M:Accelbuffer.InputBuffer.#ctor(System.Byte*,System.Int64,System.Boolean)">
            <summary>
            使用指定的字节指针床垫输入缓冲区
            </summary>
            <param name="source">指向一个字节数组的指针</param>
            <param name="size">缓冲区可以读取的字节数量</param>
            <param name="strictMode">是否启用严格模式（开启对序列化索引不匹配的错误警告）</param>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadBytes(System.Byte*,System.Int64)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableInt8(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableUInt8(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableInt16(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableUInt16(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableUInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableInt64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableUInt64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedInt8(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedUInt8(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedInt16(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedUInt16(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedUInt32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedInt64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedUInt64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadBoolean(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadChar(System.Byte,Accelbuffer.CharEncoding)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableFloat32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadVariableFloat64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedFloat32(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadFixedFloat64(System.Byte)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.InputBuffer.ReadString(System.Byte,Accelbuffer.CharEncoding)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Accelbuffer.NumberSign">
            <summary>
            数字符号（1位）
            </summary>
        </member>
        <member name="F:Accelbuffer.NumberSign.PositiveOrUnsigned">
            <summary>
            表示数字为正数或者无符号
            </summary>
        </member>
        <member name="F:Accelbuffer.NumberSign.Negative">
            <summary>
            表示数字为负数
            </summary>
        </member>
        <member name="T:Accelbuffer.ISerializeMessageReceiver">
            <summary>
            实现接口以获取序列化消息回调，对于值类型，该操作会导致装箱
            </summary>
        </member>
        <member name="M:Accelbuffer.ISerializeMessageReceiver.OnBeforeSerialize">
            <summary>
            方法会在序列化前调用
            </summary>
        </member>
        <member name="M:Accelbuffer.ISerializeMessageReceiver.OnAfterDeserialize">
            <summary>
            方法会在反序列化后调用
            </summary>
        </member>
        <member name="T:Accelbuffer.ISerializeProxy`1">
            <summary>
            实现接口完成<typeparamref name="T"/>类型对象的序列化代理
            </summary>
            <typeparam name="T">指定序列化的类型</typeparam>
        </member>
        <member name="M:Accelbuffer.ISerializeProxy`1.Serialize(`0@,Accelbuffer.OutputBuffer*@)">
            <summary>
            方法用于实现<typeparamref name="T"/>类型对象的序列化
            </summary>
            <param name="obj">将被序列化的对象（RO）</param>
            <param name="buffer">序列化缓冲区</param>
        </member>
        <member name="M:Accelbuffer.ISerializeProxy`1.Deserialize(Accelbuffer.InputBuffer*@)">
            <summary>
            方法用于实现<typeparamref name="T"/>类型对象的反序列化
            </summary>
            <param name="buffer">反序列化缓冲区</param>
            <returns>反序列化对象</returns>
        </member>
        <member name="T:Accelbuffer.OutputBuffer">
            <summary>
            用于输出数据的缓冲区
            </summary>
        </member>
        <member name="P:Accelbuffer.OutputBuffer.Size">
            <summary>
            获取当前缓冲区的大小
            </summary>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.#ctor(System.Int64)">
            <summary>
            创建一个具有默认大小的缓冲区
            </summary>
            <param name="defaultSize">缓冲区的默认大小</param>
            <exception cref="T:System.ArgumentOutOfRangeException">缓冲区的大小小于等于0</exception>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.TryFree">
            <summary>
            尝试释放当前缓冲区使用的内存
            </summary>
            <exception cref="T:System.InvalidOperationException">正在尝试释放内部创建的缓冲区</exception>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.Reset">
            <summary>
            将当前的缓冲区指针置为起始位置
            </summary>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.ToArray">
            <summary>
            将当前缓冲区内的所有字节都转换为托管字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.CopyToArray(System.ArraySegment{System.Byte})">
            <summary>
            将当前缓冲区内的所有字节都拷贝至托管字节数组
            </summary>
            <param name="array">需要被拷贝到的字节数组</param>
            <exception cref="T:System.ArgumentException">字节数组容量不足</exception>
            <returns>拷贝的字节数量</returns>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteBytes(System.Byte*,System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteByte(System.Byte)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.SByte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.UInt32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Int16,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.UInt16,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.UInt64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Char,Accelbuffer.CharEncoding)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="isFixed"></param>
        </member>
        <member name="M:Accelbuffer.OutputBuffer.WriteValue(System.Byte,System.String,Accelbuffer.CharEncoding)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:Accelbuffer.MissingSerializedValueException">
            <summary>
            指定序列化索引值未找到错误
            </summary>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor(System.String)">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.MissingSerializedValueException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 MissingSerializedValueException 实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.SerializeContractAttribute">
            <summary>
            表示 类型/结构/接口 序列化的协议
            </summary>
        </member>
        <member name="P:Accelbuffer.SerializeContractAttribute.InitialBufferSize">
            <summary>
            获取/设置 初始的序列化缓冲区大小，以字节为单位
            </summary>
        </member>
        <member name="P:Accelbuffer.SerializeContractAttribute.StrictMode">
            <summary>
            获取/设置 是否使用严格序列化模式（开启对序列化索引不匹配的错误警告）
            </summary>
        </member>
        <member name="P:Accelbuffer.SerializeContractAttribute.ProxyType">
            <summary>
            获取 序列化代理类型
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializeContractAttribute.#ctor">
            <summary>
            初始化 SerializeContractAttribute 实例，并指示运行时自动注入序列化代理
            </summary>
        </member>
        <member name="M:Accelbuffer.SerializeContractAttribute.#ctor(System.Type)">
            <summary>
            初始化 SerializeContractAttribute 实例，并指示运行时使用<paramref name="proxyType"/>类型作为序列化代理
            </summary>
            <param name="proxyType">序列化代理类型</param>
        </member>
        <member name="T:Accelbuffer.Serializer`1">
            <summary>
            公开序列化<typeparamref name="T"/>类型对象的接口
            </summary>
            <typeparam name="T">序列化类型</typeparam>
        </member>
        <member name="P:Accelbuffer.Serializer`1.InitialBufferSize">
            <summary>
            获取/设置 初始化缓冲区使用的字节大小，对于自定义类型，该值可能为<see cref="P:Accelbuffer.SerializeContractAttribute.InitialBufferSize"/>
            </summary>
        </member>
        <member name="P:Accelbuffer.Serializer`1.StrictMode">
            <summary>
            获取/设置 是否使用严格的序列化模式（开启对序列化索引不匹配的错误警告），对于自定义类型，该值可能为<see cref="P:Accelbuffer.SerializeContractAttribute.StrictMode"/>
            </summary>
        </member>
        <member name="P:Accelbuffer.Serializer`1.CurrentBufferSize">
            <summary>
            获取当前缓冲区使用的字节大小
            </summary>
        </member>
        <member name="M:Accelbuffer.Serializer`1.FreeBufferMemory">
            <summary>
            释放当前序列化缓冲区使用的内存
            </summary>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0)">
            <summary>
            使用内部维护的缓冲区序列化对象，并返回序列化数据（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <returns>对象的序列化结果</returns>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0,System.ArraySegment{System.Byte})">
            <summary>
            使用内部维护的缓冲区序列化对象，并将序列化数据写入指定的缓冲区中（线程安全）
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="buffer">用于接受序列化数据的缓冲区</param>
            <returns>序列化数据的大小</returns>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Serialize(`0,Accelbuffer.OutputBuffer*)">
            <summary>
            使用指定的缓冲区序列化对象，并写入序列化数据中
            </summary>
            <param name="obj">被序列化的对象</param>
            <param name="buffer">用于序列化对象的缓冲区</param>
            <exception cref="T:System.ArgumentNullException">缓冲区指针为空</exception>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Deserialize(System.ArraySegment{System.Byte})">
            <summary>
            将指定的字节数组反序列化成<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="bytes">被反序列化的字节数组</param>
            <returns>反序列化的对象实例</returns>
        </member>
        <member name="M:Accelbuffer.Serializer`1.Deserialize(Accelbuffer.InputBuffer*)">
            <summary>
            将指定的缓冲区中的数据反序列化成<typeparamref name="T"/>类型对象实例
            </summary>
            <param name="buffer">反序列化缓冲区</param>
            <returns>反序列化的对象实例</returns>
        </member>
        <member name="T:Accelbuffer.TagDismatchException">
            <summary>
            标签不匹配错误
            </summary>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor(System.String)">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Accelbuffer.TagDismatchException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 TagDismatchException 实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="T:Accelbuffer.ValueTypeCode">
            <summary>
            数据类型码（3位）
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.VariableInteger">
            <summary>
            动态长度的整数(0-64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.FixedInteger">
            <summary>
            固定长度的整数(0b, 8b, 16b, 32b, 64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.VariableFloat">
            <summary>
            动态长度的浮点数(0-64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.FixedFloat">
            <summary>
            固定长度的浮点数(0b, 32b, 64b)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.Boolean">
            <summary>
            布尔值(true or false)
            </summary>
        </member>
        <member name="F:Accelbuffer.ValueTypeCode.Char">
            <summary>
            字符值(char or string)
            </summary>
        </member>
        <member name="T:Accelbuffer.TagUtility">
            <summary>
            提供对数据标签创建和读取的接口
            </summary>
        </member>
    </members>
</doc>
