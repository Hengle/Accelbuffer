//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 扩展类型请使用partial关键字在其他文件扩展，否则更改可能会丢失。
namespace Accelbuffer.Compiling.Declarations
{
    using Accelbuffer;
    using Accelbuffer.Injection;
    using Accelbuffer.Memory;
    using System;
    using System.Collections.Generic;
    using boolean = System.Boolean;
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;
    using float32 = System.Single;
    using float64 = System.Double;
    using float128 = System.Decimal;
    using nint = System.IntPtr;
    using nuint = System.UIntPtr;
    using vint = Accelbuffer.VInt;
    using vuint = Accelbuffer.VUInt;
    
    
    /// <summary>
    /// 字段声明
    /// </summary>
    [MemorySize(450)]
    [SerializeBy(typeof(FieldDeclaration.FieldDeclarationSerializer))]
    public sealed partial class FieldDeclaration
    {
        
        [SerialIndex(1)]
        private TypeName m_RealType;
        
        [SerialIndex(2)]
        private TypeName m_Type;
        
        [SerialIndex(3)]
        private string m_Name;
        
        [SerialIndex(4)]
        private string m_Doc;
        
        [NeverNull()]
        [SerialIndex(5)]
        private vint m_Index;
        
        [NeverNull()]
        [SerialIndex(6)]
        private boolean m_IsObsolete;
        
        [NeverNull()]
        [SerialIndex(7)]
        private boolean m_IsNeverNull;
        
partial void OnBeforeSerialization();
partial void OnAfterDeserialization();
        
        /// <summary>
        /// 字段的真实类型
        /// </summary>
        public TypeName RealType
        {
            get
            {
                return this.m_RealType;
            }
            set
            {
                this.m_RealType = value;
            }
        }
        
        /// <summary>
        /// 字段的类型
        /// </summary>
        public TypeName Type
        {
            get
            {
                return this.m_Type;
            }
            set
            {
                this.m_Type = value;
            }
        }
        
        /// <summary>
        /// 字段的名称
        /// </summary>
        public string Name
        {
            get
            {
                return this.m_Name;
            }
            set
            {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// 字段的文档
        /// </summary>
        public string Doc
        {
            get
            {
                return this.m_Doc;
            }
            set
            {
                this.m_Doc = value;
            }
        }
        
        /// <summary>
        /// 字段的索引
        /// </summary>
        public vint Index
        {
            get
            {
                return this.m_Index;
            }
            set
            {
                this.m_Index = value;
            }
        }
        
        /// <summary>
        /// 字段是否过时
        /// </summary>
        public boolean IsObsolete
        {
            get
            {
                return this.m_IsObsolete;
            }
            set
            {
                this.m_IsObsolete = value;
            }
        }
        
        /// <summary>
        /// 字段是否永远不会为null
        /// </summary>
        public boolean IsNeverNull
        {
            get
            {
                return this.m_IsNeverNull;
            }
            set
            {
                this.m_IsNeverNull = value;
            }
        }
        
        /// <summary>
        /// 序列化对象
        /// </summary>
        public byte[] ToBytes()
        {
            byte[] result;
            Serializer.Serialize(this, out result);
            return result;
        }
        
        /// <summary>
        /// 反序列化对象
        /// </summary>
        public static FieldDeclaration FromBytes(byte[] bytes)
        {
return Serializer.Deserialize<FieldDeclaration>(bytes, 0, bytes.Length);
        }
        
        /// <summary>
        /// 对象序列化代理（自动生成）
        /// </summary>
        public sealed class FieldDeclarationSerializer : object, ITypeSerializer<FieldDeclaration>
        {
            
            /// <summary>
            /// 序列化方法（自动生成）
            /// </summary>
            public void Serialize(FieldDeclaration obj, ref AccelWriter writer)
            {
                obj.OnBeforeSerialization();
                if ((obj.m_RealType != null))
                {
                    writer.WriteValue(1, obj.m_RealType);
                }
                if ((obj.m_Type != null))
                {
                    writer.WriteValue(2, obj.m_Type);
                }
                if ((obj.m_Name != null))
                {
                    writer.WriteValue(3, obj.m_Name);
                }
                if ((obj.m_Doc != null))
                {
                    writer.WriteValue(4, obj.m_Doc);
                }
                writer.WriteValue(5, obj.m_Index);
                writer.WriteValue(6, obj.m_IsObsolete);
                writer.WriteValue(7, obj.m_IsNeverNull);
            }
            
            /// <summary>
            /// 反序列化方法（自动生成）
            /// </summary>
            public FieldDeclaration Deserialize(ref AccelReader reader)
            {
                FieldDeclaration result = new FieldDeclaration();
                int index;
			while (reader.HasNext(out index))
			{
				switch (index)
				{
					case 1:
						result.m_RealType = reader.ReadGeneric<TypeName>();
						break;
					case 2:
						result.m_Type = reader.ReadGeneric<TypeName>();
						break;
					case 3:
						result.m_Name = reader.ReadString();
						break;
					case 4:
						result.m_Doc = reader.ReadString();
						break;
					case 5:
						result.m_Index = reader.ReadVariantInt();
						break;
					case 6:
						result.m_IsObsolete = reader.ReadBoolean();
						break;
					case 7:
						result.m_IsNeverNull = reader.ReadBoolean();
						break;
					default:
						reader.SkipNext();
						break;
				}
			}

                result.OnAfterDeserialization();
                return result;
            }
        }
    }
}
