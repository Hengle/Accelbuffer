//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 扩展类型请使用partial关键字在其他文件扩展，否则更改可能会丢失。
namespace Accelbuffer.Compiling.Declarations
{
    using Accelbuffer;
    using Accelbuffer.Injection;
    using Accelbuffer.Memory;
    using System;
    using System.Collections.Generic;
    using boolean = System.Boolean;
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;
    using float32 = System.Single;
    using float64 = System.Double;
    using float128 = System.Decimal;
    using nint = System.IntPtr;
    using nuint = System.UIntPtr;
    using vint = Accelbuffer.VInt;
    using vuint = Accelbuffer.VUInt;
    
    
    /// <summary>
    /// 类型别名的声明
    /// </summary>
    [MemorySize(251)]
    [SerializeBy(typeof(UsingAsDeclaration.UsingAsDeclarationSerializer))]
    public sealed partial class UsingAsDeclaration
    {
        
        [SerialIndex(1)]
        private TypeName m_TypeName;
        
        [SerialIndex(2)]
        private string m_AliasName;
        
partial void OnBeforeSerialization();
partial void OnAfterDeserialization();
        
        /// <summary>
        /// 原始类型名
        /// </summary>
        public TypeName TypeName
        {
            get
            {
                return this.m_TypeName;
            }
            set
            {
                this.m_TypeName = value;
            }
        }
        
        /// <summary>
        /// 类型的别名
        /// </summary>
        public string AliasName
        {
            get
            {
                return this.m_AliasName;
            }
            set
            {
                this.m_AliasName = value;
            }
        }
        
        /// <summary>
        /// 序列化对象
        /// </summary>
        public byte[] ToBytes()
        {
            byte[] result;
            Serializer.Serialize(this, out result);
            return result;
        }
        
        /// <summary>
        /// 反序列化对象
        /// </summary>
        public static UsingAsDeclaration FromBytes(byte[] bytes)
        {
return Serializer.Deserialize<UsingAsDeclaration>(bytes, 0, bytes.Length);
        }
        
        /// <summary>
        /// 对象序列化代理（自动生成）
        /// </summary>
        public sealed class UsingAsDeclarationSerializer : object, ITypeSerializer<UsingAsDeclaration>
        {
            
            /// <summary>
            /// 序列化方法（自动生成）
            /// </summary>
            public void Serialize(UsingAsDeclaration obj, ref AccelWriter writer)
            {
                obj.OnBeforeSerialization();
                if ((obj.m_TypeName != null))
                {
                    writer.WriteValue(1, obj.m_TypeName);
                }
                if ((obj.m_AliasName != null))
                {
                    writer.WriteValue(2, obj.m_AliasName);
                }
            }
            
            /// <summary>
            /// 反序列化方法（自动生成）
            /// </summary>
            public UsingAsDeclaration Deserialize(ref AccelReader reader)
            {
                UsingAsDeclaration result = new UsingAsDeclaration();
                int index;
			while (reader.HasNext(out index))
			{
				switch (index)
				{
					case 1:
						result.m_TypeName = reader.ReadGeneric<TypeName>();
						break;
					case 2:
						result.m_AliasName = reader.ReadString();
						break;
					default:
						reader.SkipNext();
						break;
				}
			}

                result.OnAfterDeserialization();
                return result;
            }
        }
    }
}
