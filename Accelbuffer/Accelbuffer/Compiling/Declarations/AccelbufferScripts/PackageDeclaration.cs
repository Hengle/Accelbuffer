//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 扩展类型请使用partial关键字在其他文件扩展，否则更改可能会丢失。
namespace Accelbuffer.Compiling.Declarations
{
    using Accelbuffer;
    using Accelbuffer.Injection;
    using Accelbuffer.Memory;
    using System;
    using System.Collections.Generic;
    using boolean = System.Boolean;
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;
    using float32 = System.Single;
    using float64 = System.Double;
    using float128 = System.Decimal;
    using nint = System.IntPtr;
    using nuint = System.UIntPtr;
    using vint = Accelbuffer.VInt;
    using vuint = Accelbuffer.VUInt;
    
    
    /// <summary>
    /// 包声明
    /// </summary>
    [MemorySize(120)]
    [SerializeBy(typeof(PackageDeclaration.PackageDeclarationSerializer))]
    public sealed partial class PackageDeclaration
    {
        
        [SerialIndex(1)]
        private string m_PackageName;
        
partial void OnBeforeSerialization();
partial void OnAfterDeserialization();
        
        /// <summary>
        /// 包名
        /// </summary>
        public string PackageName
        {
            get
            {
                return this.m_PackageName;
            }
            set
            {
                this.m_PackageName = value;
            }
        }
        
        /// <summary>
        /// 序列化对象
        /// </summary>
        public byte[] ToBytes()
        {
            byte[] result;
            Serializer.Serialize(this, out result);
            return result;
        }
        
        /// <summary>
        /// 反序列化对象
        /// </summary>
        public static PackageDeclaration FromBytes(byte[] bytes)
        {
return Serializer.Deserialize<PackageDeclaration>(bytes, 0, bytes.Length);
        }
        
        /// <summary>
        /// 对象序列化代理（自动生成）
        /// </summary>
        public sealed class PackageDeclarationSerializer : object, ITypeSerializer<PackageDeclaration>
        {
            
            /// <summary>
            /// 序列化方法（自动生成）
            /// </summary>
            public void Serialize(PackageDeclaration obj, ref AccelWriter writer)
            {
                obj.OnBeforeSerialization();
                if ((obj.m_PackageName != null))
                {
                    writer.WriteValue(1, obj.m_PackageName);
                }
            }
            
            /// <summary>
            /// 反序列化方法（自动生成）
            /// </summary>
            public PackageDeclaration Deserialize(ref AccelReader reader)
            {
                PackageDeclaration result = new PackageDeclaration();
                int index;
			while (reader.HasNext(out index))
			{
				switch (index)
				{
					case 1:
						result.m_PackageName = reader.ReadString();
						break;
					default:
						reader.SkipNext();
						break;
				}
			}

                result.OnAfterDeserialization();
                return result;
            }
        }
    }
}
